__version__: 1.0.1
class_name: TFTrainingConfig
deterministic: true
checkpoint_frequency: epoch
feature_info:
  class_name: TftFeatureInfo
feature_specs:
  feature_config:
    class_name: FeatureConfigSchema
    feature_names: ["fare", "miles_per_second", "fare_per_mile", "trip_start_month_cos", "trip_start_month_sin", "trip_start_hour", "trip_start_day", "dropoff_latitude", "dropoff_longitude", "trip_miles", "dropoff_census_tract", "payment_type", "company", "trip_seconds", "dropoff_community_area", "pickup_community_area", "company_sequence"]
    extra_names: ["is_heavy_tipper"]
loss:
  is_heavy_tipper:
    class_name: BinaryCrossentropy
    from_logits: true
    reduction: sum_over_batch_size
loss_weights:
  is_heavy_tipper: 1
exporters:
  - class_name: OutputTransformExporter
    input_function:
      class_name: TFTInputFn
    output_layers:
      serving:
        layer:
          class_name: SuffixOutputs
          suffix: /scores
model:
  build_graph: |-
    from bento.training.utils.initializers import Sine 

    embedding_combiner = 'sqrtn'
    initializer = Sine(0.05)
    default_activation = tf.nn.relu
    default_norm = 'layer_norm'
    default_ordering_type = 'bento_old_default'
    kernel_initializer = Sine(0.05)
    mlp_units = [4, 2]
    indicator_variables = ['company_as_string', 'dropoff_census_tract', 'dropoff_latitude', 'dropoff_longitude', 'pickup_latitude', 'pickup_longitude', 'trip_start_day', 'trip_start_hour', 'trip_start_month']
    embedding_specs = [EmbeddingSpec(name='payment_type', vocabulary_type='dynamic', dimension=4, initializer=initializer), EmbeddingSpec(name='company', vocabulary_type='dynamic', dimension=8, initializer=initializer), EmbeddingSpec(name='community_areas', vocabulary_type='dynamic', shared_names=['dropoff_community_area', 'pickup_community_area'], dimension=8, initializer=initializer)]

    for indicator_variable in indicator_variables:
      embedding_specs.append(EmbeddingSpec(name=indicator_variable, vocabulary_type='static'))

    seq_embedding_specs = [EmbeddingSpec(name='company_sequence', vocabulary_type='dynamic', dimension=8, initializer=initializer)]

    self.main_features = layers.InputLayerKeras(feature_filters=[filters.RegexFilter('company', negate=True)], feature_fusion=LayerBasedFusion(feature_info=feature_info, embedding_specs=embedding_specs, embedding_combiner=embedding_combiner, name='main_fusion'), name='main_features')
    
    self.use_sequence_features = 'company_sequence' in self.feature_info.get_enabled_features()
    if self.use_sequence_features:
      self.sequence_features = layers.InputLayerKeras(feature_filters=[filters.NameMatchFilter(['company_sequence'])],
          feature_fusion=SequenceFeatureFusion(feature_info=feature_info,
            embedding_specs=seq_embedding_specs,
            embedding_combiner=embedding_combiner, name='sequence_fusion'),
            name='sequence_features'
          )

    self.layer1 = layers.SimpleMLP(units=mlp_units, ordering_type=default_ordering_type, activation=default_activation, normalization=default_norm, kernel_initializer=kernel_initializer)
    self.layer2 = layers.LogitsLayer(1, name='output', kernel_initializer=kernel_initializer)
  call_graph: |-
    dense_input = self.main_features(inputs, training=training)

    if self.use_sequence_features:
      sequence_input_, _, _ = self.sequence_features(inputs, training=training)
      sequence_input = tf.reduce_sum(sequence_input_, axis=1)
      body_input = tf.concat([dense_input, sequence_input], axis=1)
    else:
      body_input = dense_input
    
    net = self.layer1(body_input, training=training)
    logits = self.layer2(net, training=training)
  class_name: FunctionalApiKeras
  labels:
    - name: is_heavy_tipper
num_epochs: 2
optimizer:
  class_name: StrictAdam
  learning_rate:
    class_name: bento>FeedsCosineSchedule
    end_rate: 1e-4
    peak_rate: 3e-3
    start_rate: 1e-5
    warmup_fraction: 0.3
train_dataset:
  batch_size: 8
  class_name: TFRecordDataset
  file_settings:
    num_reader_threads: 1
  label_names:
    - is_heavy_tipper
  shuffle_files: false
  shuffle_multiplier: -1
  concat_labels: false